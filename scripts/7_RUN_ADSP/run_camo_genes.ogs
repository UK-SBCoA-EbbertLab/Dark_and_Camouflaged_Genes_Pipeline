#!/bin/bash
#$ -cwd  ## start job in current working directory (where it's submitted from)
#$ -N Camo_run_CR1 ## job name
#$ -q 1-day  ## queue
#$ -M jensen.tanner@mayo.edu  ## email
#$ -pe threaded 1
#$ -l h_vmem=32G  ## Memory request
#$ -j y
#$ -notify  ## tells OGS to allow a 'trap'

# source .bash_profile because OGS is lame
source $HOME/.bash_profile

TEMPORARY_DIR="/tmp/$JOB_ID"

#	set up function.  this isn't called/run here.  It's only used
#   if the job is canceled via a signal
cleanup_scratch()
{
	echo "Deleting inside signal handler, meaning I probably either hit the walltime, or deleted the job"

	# I don't want partial data, so don't copy.
	#cp -v "$TEMPORARY_DIR/results.dat" "$DATA_DEST_DIR"

	#change to a safe location
	cd "$HOME"

	#remove the remaining data in $TEMPORARY_DIR
	#rm -rfv "$TEMPORARY_DIR"
	echo "---"
	echo "Signal handler ending time:"
	date
	exit 0
}


# Associate the function "cleanup_scratch" with the TERM signal, which is usually how jobs get killed
trap 'cleanup_scratch' TERM


echo "Job running on: `hostname`"


echo "Creating TMP dir: $TEMPORARY_DIR"
mkdir -p $TEMPORARY_DIR

# a range of samples from the complete bam_list.txt to run (inclusive). Should
# be comma-delmited to work with sed
sample_range=$1		

# The bed file to use for extracting reads from each sample
realign_bed=$2		

# The bed file to use for calling variants. This will make GATK much faster.
# Using a different bed file here because the regions are expanded a bit
# since reads extend past.
gatk_bed=$3			

threads=1

#Path prefix to camo-masked references
# Should look like: path/to/refs/b37-camo_mask
ref_prefix=$4
filtered_bam_list=$5
DATA_DEST_DIR=$6

# GATK=gatk_3.7
GATK="java -Xmx24g -jar /mforge/research/labs/moleneurosci/petrucelli/m199515/tools/GenomeAnalysisTK-3.8-1-0-gf15c1c3ef/GenomeAnalysisTK.jar"

bam_list=${TEMPORARY_DIR}/bam_list.txt

# Writing bam_list
echo "sed \"${sample_range}!d\" $filtered_bam_list > $bam_list"
sed "${sample_range}!d" $filtered_bam_list > $bam_list


# Regex to extract SRR sample name from path 
regex=".*\/ADSP\/[_A-Za-z0-9]+\/bam\/s_(.+).bam"

max_repeat=5
for repeat_num in $(seq 2 1 $max_repeat)
do
	ploidy=$(( $repeat_num * 2 ))
	mkdir -p $DATA_DEST_DIR/gvcfs/ploidy_${ploidy}/
	ploidy_list="$TEMPORARY_DIR/gvcfs_ploidy${ploidy}.list"
	gvcf_list[$repeat_num]=$ploidy_list
done

while read bam
do

	[[ $bam =~ $regex ]]
	sampleName=${BASH_REMATCH[1]}

	echo "Sample name: $sampleName"

	tmp_bam=$TEMPORARY_DIR/${sampleName}.sorted.bam

	for repeat_num in $(seq 2 1 $max_repeat)
	do
		ploidy=$(( 2 * $repeat_num ))
		echo "testing ploidy level $ploidy"
		ref="${ref_prefix}.ploidy_${ploidy}.fa"

		# concat bed regions into a single "regions" list. Samtools does not use the .bam index
		# if you use the -L <bed> option.
		#
		# The fist part is skipping comment lines. 'paste' is a unicx command that pastes file lines together.
		regions=$(awk "\$5 == $repeat_num { print \"chr\"\$1\":\"\$2\"-\"\$3 }" $realign_bed | paste -sd " ")
		if [[ -z $regions ]]; then continue; fi #if regions is empty skip 

		# Extract reads from regions and sort by read name.
		#echo "samtools view -hb $bam | samtools sort -n -m 10G -o $tmp_bam"
		#samtools view -hb $bam $regions | samtools sort -@ $threads -n -m 10G -o $tmp_bam

		#Extract only reads with MapQ < 10
		echo "samtools view -h $bam regions | awk '\$5 < 10' | samtools view -hb > $tmp_bam"
		time samtools view -h $bam $regions | \
			awk '$5 < 10' | \
			samtools view -hb > $tmp_bam

		# Convert to fastq
		fq=$TEMPORARY_DIR/${sampleName}_R1.fastq

		echo "bedtools bamtofastq -i $tmp_bam -fq $fq"
		time bedtools bamtofastq -i $tmp_bam -fq $fq

		# Remove tmp_bam
		rm $tmp_bam*

		# Align with BWA
		aligned_sam=$TEMPORARY_DIR/${sampleName}.sam
		final_bam=$TEMPORARY_DIR/${sampleName}.ploidy_${ploidy}.bam
		RG="@RG\tID:group1\tSM:$sampleName\tPL:illumina\tLB:lib1\tPU:unit1"
		echo "bwa mem -M -R $RG -t $threads $ref $fq > ${aligned_sam}"
		time bwa mem -M  \
			-R $RG \
			-t $threads \
			$ref \
			$fq > $aligned_sam

		# Convert to sorted bam
		echo "samtools view -bt $ref $aligned_sam | samtools sort -@ $threads -m 4G -o $final_bam -"
		time samtools view -bt $ref $aligned_sam | samtools sort -@ $threads -m 4G -o $final_bam -

		# Remove sam and fastqs
		rm $aligned_sam
		rm $fq

		# index bam
		echo "samtools index $final_bam"
		samtools index $final_bam


		# Call mutations
		# I don't see how we can perform base recalibrator since
		# these regions have never been characterized.
		gvcf=$TEMPORARY_DIR/${sampleName}.${repeat_num}.g.vcf

		echo $gvcf >> ${gvcf_list[$repeat_num]}
		
		time $GATK \
			-T HaplotypeCaller \
			-R $ref \
			-I $final_bam \
			-L $gatk_bed \
			--sample_ploidy $ploidy \
			--genotyping_mode DISCOVERY \
			--emitRefConfidence GVCF \
			--dontUseSoftClippedBases \
			-o $gvcf
	done
done < $bam_list

for repeat_num in $(seq 2 1 $max_repeat)
do
	ploidy=$(( $repeat_num * 2 ))
	ref="${ref_prefix}.ploidy_${ploidy}.fa"
	comb_gvcf_file=$DATA_DEST_DIR/gvcfs/ploidy_${ploidy}/$JOB_ID.g.vcf
	echo "$GATK -T CombineGVCFs -R $ref -o $comb_gvcf_file  --variant ${gvcf_list[$repeat_num]}"
	$GATK \
		-T CombineGVCFs \
		-R $ref \
		-o $comb_gvcf_file \
		--variant ${gvcf_list[$repeat_num]}
done

#############
## CLEAN UP #
#############
#change to a safe location
cd "$HOME"

#remove the data in $TEMPORARY_DIR
echo "Removing tmp files files..."
rm -rfv "$TEMPORARY_DIR"
echo "---"

echo "COMMAND(`date`): DONE."
